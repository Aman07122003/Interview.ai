version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: interview-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: interview_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - interview-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: interview-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - interview-network

  # Python Session Monitoring Microservice
  python-monitor:
    build:
      context: ./python_microservice
      dockerfile: Dockerfile
    container_name: interview-python-monitor
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017
      - NODEJS_BACKEND_URL=http://nodejs-backend:5000
      - PYTHONPATH=/app
    ports:
      - "8001:8001"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./python_microservice/models:/app/models
    networks:
      - interview-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node.js Backend
  nodejs-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: interview-nodejs-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/interview_platform
      - REDIS_URL=redis://redis:6379
      - PYTHON_SERVICE_URL=http://python-monitor:8001
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - REFRESH_TOKEN_SECRET=your-super-secret-refresh-key-change-in-production
      - ACCESS_TOKEN_SECRET=your-super-secret-access-key-change-in-production
      - FRONTEND_URL=http://localhost:3000
      - STRICT_DEVICE_VALIDATION=false
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
      python-monitor:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - interview-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: interview-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - nodejs-backend
      - python-monitor
    networks:
      - interview-network

  # MongoDB Express (Optional - for database management)
  mongo-express:
    image: mongo-express:latest
    container_name: interview-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - interview-network

  # Redis Commander (Optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: interview-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - interview-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  interview-network:
    driver: bridge 